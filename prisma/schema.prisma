// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Issue {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  issueId          String    @unique
  title            String
  description      String    @db.String
  status           Status    @default(OPEN)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  createdByUserId  String    @db.ObjectId
  createdByUser    User      @relation(name: "CreatedIssues", fields: [createdByUserId], references: [id])
  assignedToUserId String?   @db.ObjectId
  assignedToUser   User?     @relation(name: "AssignedIssues", fields: [assignedToUserId], references: [id])
  comments         Comment[] @relation("IssueComments")
  relatedIssueIds  String[]  @default([]) @db.ObjectId
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

model Comment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  detail          String   @db.String
  createdAt       DateTime @default(now())
  issueId         String   @db.ObjectId
  issue           Issue    @relation("IssueComments", fields: [issueId], references: [id])
  createdByUserId String   @db.ObjectId
  createdByUser   User     @relation(fields: [createdByUserId], references: [id])
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdIssue  Issue[]   @relation(name: "CreatedIssues")
  assignedIssue Issue[]   @relation(name: "AssignedIssues")
  comments      Comment[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
